set auto-load safe-path /
set pagination off
set logging file glog.txt
set logging overwrite on
set logging on
set print pretty on
set case-sensitive off

#include /kernel-path/Documentation/kdump/gdbmacros.txt
#CONFIG_GDB_SCRIPTS=y to generate /kernel-path/vmlinux-gdb.py

define dump_init_setup_section
	set $pps=(struct obs_kernel_param*)&__setup_start
	set $ppe=(struct obs_kernel_param*)&__setup_end
	while ($pps != $ppe)
		p *$pps
		set $pps=$pps+1
	end
end
document dump_init_setup_section
end

define dump_param_section
	set $pstart=(struct kernel_param*)&__start___param
	set $pstop=(struct kernel_param*)&__stop___param
	while ($pstart != $pstop)
		p *$pstart
		set $pstart=$pstart+1
	end
end
document dump_param_section
end

define dump_initcall_section
	set $pinitcalls=(long *)(&__initcall_start)
	set $pinitcalle=(long *)(&__initcall_end)
	while ($pinitcalls != $pinitcalle)
		p (initcall_t*)$pinitcalls
		p (initcall_t)(*$pinitcalls)
		set $pinitcalls=$pinitcalls+1
	end
end
document dump_initcall_section
end

define dump_current
	set var $stacksize = sizeof(union thread_union)
	set var $stackp = (size_t)$sp
	set var $stack_bottom = ($stackp) & (~($stacksize - 1))
	set var $threadinfo = (struct thread_info *)$stack_bottom
	set var $task_struct =(struct task_struct *)($threadinfo->task)
	printf "current::pid:%d; comm:%s; mm:0x%x ", $task_struct->pid, $task_struct->comm, $task_struct->mm
	if ($task_struct->mm != 0)
		printf "pgd:0x%x\n", $task_struct->mm->pgd
	else
		printf "pgd:0\n"
	end
end
