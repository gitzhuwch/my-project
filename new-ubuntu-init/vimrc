let mapleader=";"
set nocompatible
autocmd BufWritePost $MYVIMRC source $MYVIMRC
set wildmenu "vim 自身命令行模式智能补全
set nu
set laststatus=2
set syntax=on
set hlsearch
set mouse=a
set autowrite
set autoread
set hidden
filetype on
set tags=./tags,tags;$HOME
set background=dark
set showcmd
set showmatch
set ignorecase
set smartcase
set incsearch
set hidden
set mouse=a
set tabstop=4
set softtabstop=4
set shiftwidth=4
"set expandtab "replace tab with space
"set encoding=utf-8
set autoindent
set cindent
set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s
set ruler
set backspace=2
set clipboard=unnamed,unnamedplus "*号和+号reg都和系统剪切板关联
"set cscopetag
"set cursorline
"set cursorcolumn
set nowrap
syntax enable
"set foldmethod=indent
set foldmethod=syntax
set nofoldenable "启动 vim 时关闭折叠代码
"set conceallevel=2
"set laststatus=2
"set statusline+=%F
"set statusline=%F%m%r%h%w%=\ [ft=%Y]\ %{\"[fenc=\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\"+\":\"\").\"]\"}\ [ff=%{&ff}]\ [asc=%03.3b]\ [hex=%02.2B]\ [pos=%04l,%04v][%p%%]\ [len=%L]
set sessionoptions="blank,globals,localoptions,tabpages,sesdir,folds,help,options,resize,winpos,winsize"
highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/
"colorscheme adaryn

if has("autocmd")
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"Like CTRL-], but use :tselect instead of :tag
map <C-]> g]
"取消w/q定义,避免与下面部分快捷键冲突,CTRL-s:block window and CTRL-q:going on
map q <Nop>
map Q <Nop>
map w <Nop>
map W <Nop>
"保存/退出
map qq :qa!<CR>
map <Leader>q :q!<CR>
map ww :wa<CR>
map <Leader>w :w<CR>
map b :bn<CR>
map B :bp<CR>
"切换窗口
map <C-Left> <C-w>h
map <C-Right> <C-w>l
map <C-Up> <C-w>k
map <C-Down> <C-w>j
nnoremap <Leader>l <C-W>l
nnoremap <Leader>h <C-W>h
nnoremap <Leader>k <C-W>k
nnoremap <Leader>j <C-W>j
"改变窗口高度/宽度
map <S-Left> <C-w><
map <S-Right> <C-w>>
map <S-Up> <C-w>+
map <S-Down> <C-w>-
"删除空格
map <Leader>s :%s/\s\+$//g<CR>

filetype off
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()
"如果你的插件来自github，写在下方，只要作者名/项目名就行了
Plugin 'VundleVim/Vundle.vim' "网上说必须加上这句,亲测可以不加,但是这样的语句,不仅安装插件时使用,而且在vim启动时起到加载和初始化插件的作用,所以最好加上
"比如,将下面的Plugin 'taglist.vim'注释掉,那么即使下载了这个插件,也不会加载,vim起来后也不能使用
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
"Plugin 'suan/vim-instant-markdown'
"Plugin 'isnowfy/python-vim-instant-markdown'
"Plugin 'mzlogin/vim-markdown-toc'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
"Plugin 'bogado/file-line' "static add at end of this file
"如果插件来自 vim-scripts，你直接写插件名就行了
Plugin 'taglist.vim'
"Plugin 'minibufexpl.vim' "窗口显示易出问题,用airline.vim替代
Plugin 'DoxygenToolkit.vim'
Plugin 'auto-pairs'

"Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline'
Plugin 'vim-airline/vim-airline-themes'
"Plugin 'Molokai'

call vundle#end()
filetype plugin indent on
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"TAGLIST CONFIG......
let Tlist_Ctags_Cmd = '/usr/bin/ctags' "告知系统生成tag的程序的位置
let Tlist_Show_One_File = 1 "不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow = 1 "如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1 "在左侧窗口中显示taglist窗口
"显示函数列表
nmap tt :TlistToggle<CR>

"MARKDOWN CONFIG......
"let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_math = 1
let g:vim_markdown_fenced_languages = ['csharp=cs']
let g:vim_markdown_frontmatter=1
let g:vim_markdown_new_list_item_indent = 2
let g:vim_markdown_no_extensions_in_markdown = 1
let g:vim_markdown_autowrite = 1
let g:vim_markdown_auto_extension_ext = 'txt'
"autocmd FileType markdown :Toc "confict with file-line plugin
autocmd FileType markdown nmap <Leader>tt :Toc<CR>
autocmd FileType markdown set syntax=off
"autocmd Filetype markdown inoremap <buffer> <silent> ,3 ###<Space><Enter><++><Esc>kA

"NERDTREE CONFIG......
"使用 NERDTree 插件查看工程文件。设置快捷键，速记：file list
nmap ff :NERDTreeToggle<CR>
let NERDTreeWinSize=22 "设置 NERDTree 子窗口宽度
let NERDTreeWinPos="left" "设置 NERDTree 子窗口位置
"let NERDTreeShowHidden=1 "显示隐藏文件
let NERDTreeMinimalUI=1 "NERDTree 子窗口中不显示冗余帮助信息
let NERDTreeAutoDeleteBuffer=1 "删除文件时自动删除文件对应 buffer

"DOXYGENTOOLKIT CONFIG......
"添加函数原型说明
nmap <Leader>f :Dox<CR>

"MINIBUFEREXPL CONFIG......
"buffers list preview
"nmap mm :TMiniBufExplorer<CR>
"let g:miniBufExplorerMoreThanOne=0

"AIRLINE CONFIG......
"let g:airline_theme="molokai"
let g:airline#extensions#tabline#enabled = 1 " 显示窗口tab和buffer
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
"let g:airline#extensions#tabline#left_sep = ' '
"let g:airline#extensions#tabline#left_alt_sep = '|'
"let g:airline_left_alt_sep = '>'
"let g:airline_right_alt_sep = '<'
let g:airline_theme='bubblegum'
"let g:airline_theme='serene'
"let g:airline_theme='dark'
"let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
"let g:airline#extensions#tabline#formatter = 'default'
"let g:airline#extensions#tabline#fnametruncate = 16
"let g:airline#extensions#tabline#fnamecollapse = 2
"let g:airline#extensions#tabline#buffer_idx_mode = 1

"""""""""""""""""""""""""""""""""""""""""在此分割线以上添加""""""""""""""""""""""""""""""""""""""""
"Plugin 'bogado/file-line'
" Avoid installing twice or when in unsupported Vim version.
if exists('g:loaded_file_line') || (v:version < 701)
	finish
endif
let g:loaded_file_line = 1

" below regexp will separate filename and line/column number
" possible inputs to get to line 10 (and column 99) in code.cc are:
" * code.cc(10)
" * code.cc(10:99)
" * code.cc:10
" * code.cc:10:99
"
" closing braces/colons are ignored, so also acceptable are:
" * code.cc(10
" * code.cc:10:
let s:regexpressions = [ '\(.\{-1,}\)[(:]\(\d\+\)\%(:\(\d\+\):\?\)\?' ]

function! s:reopenAndGotoLine(file_name, line_num, col_num)
	if !filereadable(a:file_name)
		return
	endif

	let l:bufn = bufnr("%")

	exec "keepalt edit " . fnameescape(a:file_name)
	exec a:line_num
	exec "normal! " . a:col_num . '|'
	if foldlevel(a:line_num) > 0
		exec "normal! zv"
	endif
	exec "normal! zz"

	exec "bwipeout " l:bufn
	exec "filetype detect"
endfunction

function! s:gotoline()
	let file = bufname("%")

	" :e command calls BufRead even though the file is a new one.
	" As a workaround Jonas Pfenniger<jonas@pfenniger.name> added an
	" AutoCmd BufRead, this will test if this file actually exists before
	" searching for a file and line to goto.
	if (filereadable(file) || file == '')
		return file
	endif

	let l:names = []
	for regexp in s:regexpressions
		let l:names =  matchlist(file, regexp)

		if ! empty(l:names)
			let file_name = l:names[1]
			let line_num  = l:names[2] == ''? '0' : l:names[2]
			let  col_num  = l:names[3] == ''? '0' : l:names[3]
			call s:reopenAndGotoLine(file_name, line_num, col_num)
			return file_name
		endif
	endfor
	return file
endfunction

" Handle entry in the argument list.
" This is called via `:argdo` when entering Vim.
function! s:handle_arg()
	let argname = expand('%')
	let fname = s:gotoline()
	if fname != argname
		let argidx = argidx()
		exec (argidx+1).'argdelete'
		exec (argidx)'argadd' fnameescape(fname)
	endif
endfunction

function! s:startup()
	autocmd BufNewFile * nested call s:gotoline()
	autocmd BufRead * nested call s:gotoline()

	if argc() > 0
		let argidx=argidx()
		silent call s:handle_arg()
		"下面一句会触发一个error:当打开的文件存在.swp文件时,会报Error detected while processing function <SNR>7_startup:
		exec (argidx+1).'argument'
		" Manually call Syntax autocommands, ignored by `:argdo`.
		doautocmd Syntax
		doautocmd FileType
	endif
endfunction

if !isdirectory(expand("%:p"))
	autocmd VimEnter * call s:startup()
endif
