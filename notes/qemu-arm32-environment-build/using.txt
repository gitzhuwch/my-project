----------------------------------------------------
sudo apt install -y qemu-system-arm
sudo apt install -y gcc-aarch64-linux-gnu
git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git

----------------------------------------------------
Git Repos:
    QEMU: https://github.com/qemu/qemu
    Linux: https://github.com/torvalds/linux
    Busybox: (Deprecated, use the link below)
    Buildroot: git://git.buildroot.net/buildroot

----------------------------------------------------
https://www.kernel.org/
after download kernel modify sourcetree/Makefile
	add tow variable at Cross compiling and selecting different set of gcc/bin-utils:
		CROSS_COMPILE := arm-linux-gnueabi-
		ARCH	?= arm

----------------------------------------------------
get arm-linux-gnueabi-gdb cross compiler toolchains for arm
		https://releases.linaro.org/components/toolchain/binaries/latest-7/arm-linux-gnueabi/

----------------------------------------------------
1, sudo apt install qemu-system-arm
2, sudo apt install gcc-arm-linux-gnueabi
3, git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
	cd linux
	vim Makefile
		CROSS_COMPILE := arm-linux-gnueabi-
		ARCH ?= arm
	####do not modify gcc -O0 that will compiling error!! gcc -O can work, but need add local #pragma GCC optimize(O2) for gpu driver code.
	make vexpress_defconfig
	make Image -j2
4, git clone --depth=1 git://busybox.net/busybox.git
	####也可设置为nfs的挂载目录，直接通过网络文件系统进行挂载，便于开发。
	cd busybox
	vim Makefile
	ARCH ?= arm ###maybe not must
	CROSS_COMPILE ?= arm-linux-gnueabi-
	make menuconfig
		Busybox Settings—>
			Build Options—>[*] Build Busybox as a static binary(no shared libs)
		Installtion Options
			在busybox instantlltionprefix一栏中，输入你想要创建rootfs的目录,比如我的是/opt/FriendlyARM/mini2440/rootfs。
		去掉Coreutils—>sync选项；
		去掉Linux System Utilities—>nsenter选项；
	make -j4 install  ##busybox会自动将rootfs根文件系统安装到之前设置的目录下
	上述的make install命令完成后，在rootfs目录下仅仅只是创建一个根文件系统的框架，很多系统运行所必须的文件尚未建立成功，必须手动复制进去。
    1、复制busybox-1.26.2/examples/bootfloppy/etc整个目录下的全部文件，到rootfs/etc目录下。
    2、手动在文件系统中建立如下设备文件：
		cd /opt/FriendlyARM/mini2440/rootfs
		mkdir dev
		cd dev
		sudo mknod -m 660 console c 5 1
		sudo mknod -m 660 null c 1 3
		sudo chown leon *
		sudo chgrp leon *
	最后:
	find . | cpio -o -H newc > rootfs.cpio
	gzip -c rootfs.cpio > rootfs.cpio.gz

5, #qemu-system-arm -kernel ./arch/arm64/boot/Image -append "console=ttyAMA0" -m 2048M -smp 4 -M virt -cpu cortex-a57 -nographic
	#qemu-system-arm -M vexpress-a9 -m 128M -kernel ./arch/arm/boot/zImage -dtb ./arch/arm/boot/dts/vexpress-v2p-ca9.dtb -nographic -append "console=ttyAMA0"
	qemu-system-arm -M vexpress-a9 -smp 4 -m 1024M -kernel /home/user/work/qemu/linux/arch/arm/boot/zImage -initrd rootfs.cpio.gz -append "rdinit=/linuxrc console=ttyAMA0 loglevel=8" -dtb arch/arm/boot/dts/vexpress-v2p-ca9.dtb -nographic -s -S
	#must be zImage, Image and vmlinux can't bootup
----------------------------------------------------
How to enable earlyprintk when qemu debuging kernel?
	qemu-system-arm cmdline arguments add [ -append "earlyprintk console=ttyAMA0" ]

----------------------------------------------------
How to set gcc option -O0 in source code file?
#pragma GCC push_options
#pragma GCC optimize ("O0")
void fun()
{
	return 0;
}
#pragma GCC pop_options
